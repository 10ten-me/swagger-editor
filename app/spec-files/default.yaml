swagger: 2.0
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: Wordnik API Team
    email: foo@bar.baz
    url: http://madskristensen.net
  license:
    type: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: http://petstore.swagger.wordnik.com/api
basePath: /api
schemes:
  - http
consumes:
  - application/json
  - application/xml
produces:
  - application/json
paths:
  /pets:
    get:
      description: |
        Returns all pets from the system that the user has access to
      operationId: findPets
      #Override the consume
      consumes:
        - application/json
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          schema:
            type: array
            format: csv
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
        - name: X-Custom-Header
          in: header
          description: A custom header for testing
          required: false
      responses:
        200:
          description: pet response
          schema:
            type: array
            items:
              Pet:
                $ref: '#/models/Pet'
        default:
          description: unexpected error
          schema:
            Error:
              $ref: '#/models/Error'
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      parameters:
        - name: pet
          in: body
          description: Pet to add to the store
          required: true
          schema:
            NewPet:
              $ref: '#/models/NewPet'
      responses:
        200:
          description: pet response
          schema:
            Pet:
              $ref: '#/models/Pet'
        default:
          description: unexpected error
          schema:
            Error:
              $ref: '#/models/Error'
  /pet/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: pet response
          schema:
            Pet:
              $ref: '#/models/Pet'
        default:
          description: unexpected error
          schema:
            Error:
              $ref: '#/models/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: pet deleted
        default:
          description: unexpected error
          schema:
            Error:
              $ref: '#/models/Error'
        404:
          description: pet deleted
        default:
          description: unexpected error
          schema:
            Error:
              $ref: '#/models/Error'
        500:
          description: pet deleted
        default:
          description: unexpected error
          schema:
            Error:
              $ref: '#/models/Error'
        302:
          description: pet deleted
        default:
          description: unexpected error
          schema:
            Error:
              $ref: '#/models/Error'
models:
  Pet:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      tag:
        type: string
  NewPet:
    allOf:
      - Pet:
          $ref: '#/models/Pet'
      - required:
          - name
        properties:
          id:
            type: integer
            format: int64
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
