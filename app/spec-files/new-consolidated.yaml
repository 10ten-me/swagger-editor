# The public version of your API.
apiVersion: 1.0.0

# The version of the swagger specification used.  
# This version advises the tooling for compatibility.
swaggerSpecVersion: 1.2

# The root for calling this API.
baseUri: http://petstore.swagger.wordnik.com/api

# The protocols supported by this API.
protocols: 
  - http
  - https

# How people refer to this API
title: Petstore example API

# Describe the service(s). HTML hrefs are allowed.
description: This is a sample server Petstore server.  You can find out more about Swagger \n    at <a href=\http://swagger.wordnik.com\>http://swagger.wordnik.com</a> or on irc.freenode.net, #swagger.  For this sample,\n    you can use the api key \special-key\ to test the authorization filters

# Tell your API consumers where to find the terms-of-service
termsOfServiceUrl: http://helloreverb.com/terms/

# Provide a contact for support of questions
contact: apiteam@helloreverb.com

# Declare any license for using this API specification
license: Creative Commons 4.0 International
licenseUrl: http://creativecommons.org/licenses/by/4.0/

# The response types produced by this API.  
# These can be overridden in each operation
produces:
  - application/json
  - application/xml

# TODO: describe the auth section
authorizations: 
  oauth2: 
    type: oauth2
    scopes: 
      - scope: write:pets
        description: Modify pets in your account
      - scope: read:pets
        description: Read your pets
    grantTypes: 
      implicit: 
        loginEndpoint: 
          url: http://petstore.swagger.wordnik.com/oauth/dialog
        tokenName: access_token
      authorization_code: 
        tokenRequestEndpoint: 
          url: http://petstore.swagger.wordnik.com/oauth/requestToken
          clientIdName: client_id
          clientSecretName: client_secret
        tokenEndpoint: 
          url: http://petstore.swagger.wordnik.com/oauth/token
          tokenName: auth_code

# The resources this API provides.
# A resource is defined by a unique path.
resources: 

  # The path for this resource. Consumers will make requests to the
  # API by concatenating the `baseUri` + `path` values.
  - path: /pets/{petId}

    # an operation is a unique HTTP operation (method) applied to a path.
    operations:
    
      # the HTTP method (GET, PUT, POST, DELETE, PATCH, HEAD, OPTIONS)
      - method: GET

        # summary is a brief description, less than 140 chars
        summary: Find pet by ID

        # a longer description of the operation
        description: Returns a pet based on ID

        # the JSON schema return type for this operation. If no response will be
        # sent, use `void`. Any types, other than JSON schema primitives or `array`
        # declarations, must be defined in the `models` section.
        responseModel: Pet

        # unique name for the operation.  This field is used by both the swagger-ui
        # and codegen, and should contain only numbers and letters
        nickname: getPetById

        # optionally, we can override the response type from this operation
        produces:
          - application/json
          - application/xml
          - text/plain
          - text/html

        # optionally, we can override the authorization requirements for this operation
        authorizations: 
          - oauth2
          
        parameters: 
        
          # each parameter is named.  
          - name: petId

            # a short explanation of what this input parameter does (less than 140 chars)
            summary: ID of pet that needs to be fetched

            # denotes whether the parameter is required.  Path param types are always required
            required: true

            # The JSON schema data type for the parameter.  param types of header and query
            # must be JSON schema primitives.
            type: integer

            format: int64
            paramType: path

            # for header and query params, indicates that multiple values can be supplied
            allowMultiple: false
            minimum: 1.0
            maximum: 100000.0
        responseMessages: 
            # the HTTP response code
          - code: 400
            # a message to describe this condition
            message: Invalid ID supplied
            # optionally describe a response model that can be interpreted by the client
            responseModel: InvalidPetSuppliedResponseModel
          - code: 404
            message: Pet not found

  - path: /users/{username}
    operations: 
      - method: PUT
        summary: Updated user
        description: This can only be done by the logged in user.
        responseModel: void
        nickname: updateUser
        authorizations: 
          oauth2: 
            - scope: test:anything
              description: anything
        parameters: 
          - name: username
            summary: name of user to be deleted
            required: true
            type: string
            paramType: path
            allowMultiple: false
          - name: body
            description: Updated user object
            required: true
            type: User
            paramType: body
            allowMultiple: false
        responseMessages: 
          - code: 400
            message: Invalid username supplied
          - code: 404
            message: User not found

# Description of complex models consumed or produced by this API
models: 
  # the hash key (Pet in this case) always matches the `id` value
  Pet: 
    id: Pet
    required: 
      - id
      - name
    properties: 
      id: 
        type: integer
        format: int64
        description: unique identifier for the pet
        minimum: 0.0
        maximum: 100.0
      category: 
        $ref: Category
      name: 
        type: string
      photoUrls: 
        type: array
        items: 
          type: string
      tags: 
        type: array
        items: 
          $ref: Tag
      status: 
        type: string
        description: pet status in the store
        enum: 
          - available
          - pending
          - sold
  User: 
    id: User
    properties: 
      id: 
        type: integer
        format: int64
      firstName: 
        type: string
      username: 
        type: string
      lastName: 
        type: string
      email: 
        type: string
      password: 
        type: string
      phone: 
        type: string
      userStatus: 
        type: integer
        format: int32
        description: User Status
        enum: 
          - 1-registered
          - 2-active
          - 3-closed
