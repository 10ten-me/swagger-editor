# Use the YAML syntax to create a Swagger API specification.

# The public version of your API.
apiVersion: 1.0.0

# The version of the swagger specification used.  This version advises the tooling
# for compatibility.
swaggerSpecVersion: 1.2

# The root path for calling this API.
basePath: http://my.api.com/v1

# The protocols supported by this API.
protocols:
  - http
  - https

# The title of the API
title: Swagger Sample API

# A description of the API.  HTML hrefs are allowed.
description: This is my swagger-enabled API.

# Tell your API consumers where the terms-of-service are
termsOfServiceUrl: http://helloreverb.com/terms/

# Provide a contact for questions
contact: apiteam@wordnik.com

# If you have a named license for using your API
license: Apache 2.0

# The supporting URL for license info
licenseUrl: http://www.apache.org/licenses/LICENSE-2.0.html

# Declare the authorization schemes supported by your API [what are valid names?]
authorizations:
oauth2:
  # Specify which flow [add possible flow names]
  type: oauth2
  scopes:
    # Declare each scope with a name and description. [Need to enumerate resources?]
    - scope: write:pets
      description: Modify pets in your account
    - scope: read:pets
      description: Read your pets
  grantTypes:
    # What are the valid grantType names?
    implicit:
      loginEndpoint:
        url: http://petstore.swagger.wordnik.com/oauth/dialog
      tokenName: access_token
    authorization_code:
      tokenRequestEndpoint:
        url: http://petstore.swagger.wordnik.com/oauth/requestToken
        clientIdName: client_id
        clientSecretName: client_secret
      tokenEndpoint:
        url: http://petstore.swagger.wordnik.com/oauth/token
        tokenName: auth_code

# define a reusable parameter called `verbose`
whatDoICallThisKey: &verbose
  name: verbose
  description: Expand the response
  required: false
  type: boolean
  paramType: query

# The response types produced by this API.  These can be overridden
# in each operation
produces:
  - application/json
  - application/xml

# The resources this API provides.  A resource is defined by a unique
# path
resources:

  # The path for this resource.  Consumers will make requests to the
  # API by concatenating the `basePath` + `path` values.
  - path: /pets/{petId}
    # an operation is a unique HTTP operation (method) applied to a path.
    operations:

      # the HTTP method (GET, PUT, POST, DELETE, PATCH, HEAD, OPTIONS)
      - method: GET
        # summary is a brief description, less than 140 chars
        summary: Find pet by ID

        # a longer description of the operation
        description: Returns a pet based on ID

        # the JSON schema return type for this operation.  If no response will be
        # sent, use `void`.  Any types, other than JSON schema primitives or `array`
        # declarations, must be defined in the `models` section.
        type: Pet

        # unique name for the operation.  This field is used by both the swagger-ui
        # and codegen, and should contain only numbers and letters
        nickname: getPetById

        # optionally, we can override the response type from this operation
        produces:
          - application/json
          - application/xml
          - text/plain
          - text/html

        # optionally, we can override the authorization requirements for this operation
        authorizations:
          - oauth2

        # the inputs to this operation
        parameters:
          # each parameter is named.
          - name: petId

            # the type of input parameter (path, query, header, body, form).  For `path`
            # params, the `name` must match the placeholder in the `path`
            paramType: path

            # a short explanation of what this input parameter does (less than 140 chars)
            summary: ID of pet that needs to be fetched

            # denotes whether the parameter is required.  Path param types are always required
            required: true

            # for header and query params, indicates that multiple values can be supplied
            allowMultiple: false

            # The JSON schema data type for the parameter.  param types of header and query
            # must be JSON schema primitives.
            type: string

          # reference the reusable parameter called `verbose` declared above
          - <<: *verbose

        # an array of possible responses from the server
        responses:
            # the HTTP response code
            - code: 400
              # a message to describe this condition
              message: Invalid ID supplied
              # optionally describe a response model that can be interpreted by the client
              responseModel: InvalidPetSuppliedResponseModel
            - code: 404
              message: Pet not found

# Description of complex models consumed or produced by this API
models:

  # the hash key (Tag in this case) always matches the `id` value
  Tag:
    id: Tag

    # properties for the model
    properties:
      name:
        type: string
      id:
        type: integer
        format: int64
