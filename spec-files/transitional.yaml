apiVersion: 1.0.0

# renamed from swaggerSpecVersion
swaggerVersion: 1.2

# renamed from "baseUri"
basePath: http://petstore.swagger.wordnik.com/api

# wraps these elements from the top level
info:
  title: Petstore example API
  description: This is a sample server Petstore server.  You can find out more about Swagger \n    at <a href=\http://swagger.wordnik.com\>http://swagger.wordnik.com</a> or on irc.freenode.net, #swagger.  For this sample,\n    you can use the api key \special-key\ to test the authorization filters
  termsOfServiceUrl: http://helloreverb.com/terms/
  contact: apiteam@helloreverb.com
  license: Creative Commons 4.0 International
  licenseUrl: http://creativecommons.org/licenses/by/4.0/

authorizations:
  oauth2:
    type: oauth2
    scopes:
      - scope: write:pets
        description: Modify pets in your account
      - scope: read:pets
        description: Read your pets
    grantTypes:
      implicit:
        loginEndpoint:
          url: http://petstore.swagger.wordnik.com/oauth/dialog
        tokenName: access_token
      authorization_code:
        tokenRequestEndpoint:
          url: http://petstore.swagger.wordnik.com/oauth/requestToken
          clientIdName: client_id
          clientSecretName: client_secret
        tokenEndpoint:
          url: http://petstore.swagger.wordnik.com/oauth/token
          tokenName: auth_code

# derived from a copy of the "resources" section.
# each unique resource path (first /directory in the path) gets listed.
# Description can always be "Operations about {directory}" for now.
apis:
  - path: /pets
    description: Operations about pets
  - path: /users
    description: Operations about user

# comes from the "resources" section
apiDeclarations:
    # these next three are copied from top level
    apiVersion: 1.0.0
    swaggerVersion: 1.2
    basePath: http://petstore.swagger.wordnik.com/api

    # also copied from top level
    produces:
      - application/json
      - application/xml

    # there should be a resourcePath for each of the apis in L52
    resourcePath: /pets
    apis:
      - path: /pets/{petId}
        operations:
          - method: GET
            summary: Find pet by ID

            # renamed from description
            notes: Returns a pet based on ID

            # renamed from responseModel
            type: Pet
            nickname: getPetById
            # these are optional local overrides
            produces:
              - application/json
              - application/xml
              - text/plain
              - text/html
            authorizations:
              - oauth2
            parameters:

              - name: petId
                # renamed from summary.
                #alternatively, we could consider renaming the default yaml
                description: ID of pet that needs to be fetched
                required: true
                type: integer
                format: int64
                paramType: path
                allowMultiple: false
                minimum: 1.0
                maximum: 100000.0
            responseMessages:
              - code: 400
                message: Invalid ID supplied
                responseModel: InvalidPetSuppliedResponseModel
              - code: 404
                message: Pet not found

    # copied from top level as referenced by the current resourcePath
    models:
      Pet:
        id: Pet
        required:
          - id
          - name
        properties:
          id:
            type: integer
            format: int64
            description: unique identifier for the pet
            minimum: 0.0
            maximum: 100.0
          category:
            $ref: Category
          name:
            type: string
          photoUrls:
            type: array
            items:
              type: string
          tags:
            type: array
            items:
              $ref: Tag
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
    apis:
        # this section has not been annotated but follows the same rules as the other apis: section above
      - path: /users/{username}
        operations:
          - method: PUT
            summary: Updated user
            description: This can only be done by the logged in user.
            responseModel: void
            nickname: updateUser
            authorizations:
              oauth2:
                - scope: test:anything
                  description: anything
            parameters:
              - name: username
                summary: name of user to be deleted
                required: true
                type: string
                paramType: path
                allowMultiple: false
              - name: body
                description: Updated user object
                required: true
                type: User
                paramType: body
                allowMultiple: false
            responseMessages:
              - code: 400
                message: Invalid username supplied
              - code: 404
                message: User not found
    User:
      id: User
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        username:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
          enum:
            - 1-registered
            - 2-active
            - 3-closed

# insert any model needed for the generator needs.
