
* Semantic Validators

Ie: anything not covered by the json-schema

** Make a new one
#+BEGIN_SRC javascript
  export const validateOnlyFoos = () => (system) => {
    system.validateSelectors.allSchemas().then(schemas => {
      const errors = []
      schemas.forEach( schema => {
        if(schema.node.type === "array") { // `node` is the value at that point
          errors.push({
            level: "error",
            message: "We can do something with this, array.",
            path: schema.path // it'll figure out the line # from this
          })
        }
      })
    }))
  }
#+END_SRC
** We use a single traverser, although its performance leaves a little to be desired.
To implement one...
#+BEGIN_SRC javascript
export const allParameters = () => (system) => {
  return system.fn.traverseOnce({ // Returns a promise
    name: "allParameterSchemas",
    fn: (node) => { // called for each node, you need to return the node if you want it in the collecction
      if(system.validateSelectors.isParameter(node)) {
        return node
      }
    },
  })
}
#+END_SRC
